use crate::interface::input::{KeyCode, MouseButton};
use glium::glutin::event::VirtualKeyCode;

pub fn convert_key_code(value: VirtualKeyCode) -> Option<KeyCode> {
    match value {
        VirtualKeyCode::Key1 => Some(KeyCode::Key1),
        VirtualKeyCode::Key2 => Some(KeyCode::Key2),
        VirtualKeyCode::Key3 => Some(KeyCode::Key3),
        VirtualKeyCode::Key4 => Some(KeyCode::Key4),
        VirtualKeyCode::Key5 => Some(KeyCode::Key5),
        VirtualKeyCode::Key6 => Some(KeyCode::Key6),
        VirtualKeyCode::Key7 => Some(KeyCode::Key7),
        VirtualKeyCode::Key8 => Some(KeyCode::Key8),
        VirtualKeyCode::Key9 => Some(KeyCode::Key9),
        VirtualKeyCode::Key0 => Some(KeyCode::Key0),
        VirtualKeyCode::A => Some(KeyCode::A),
        VirtualKeyCode::B => Some(KeyCode::B),
        VirtualKeyCode::C => Some(KeyCode::C),
        VirtualKeyCode::D => Some(KeyCode::D),
        VirtualKeyCode::E => Some(KeyCode::E),
        VirtualKeyCode::F => Some(KeyCode::F),
        VirtualKeyCode::G => Some(KeyCode::G),
        VirtualKeyCode::H => Some(KeyCode::H),
        VirtualKeyCode::I => Some(KeyCode::I),
        VirtualKeyCode::J => Some(KeyCode::J),
        VirtualKeyCode::K => Some(KeyCode::K),
        VirtualKeyCode::L => Some(KeyCode::L),
        VirtualKeyCode::M => Some(KeyCode::M),
        VirtualKeyCode::N => Some(KeyCode::N),
        VirtualKeyCode::O => Some(KeyCode::O),
        VirtualKeyCode::P => Some(KeyCode::P),
        VirtualKeyCode::Q => Some(KeyCode::Q),
        VirtualKeyCode::R => Some(KeyCode::R),
        VirtualKeyCode::S => Some(KeyCode::S),
        VirtualKeyCode::T => Some(KeyCode::T),
        VirtualKeyCode::U => Some(KeyCode::U),
        VirtualKeyCode::V => Some(KeyCode::V),
        VirtualKeyCode::W => Some(KeyCode::W),
        VirtualKeyCode::X => Some(KeyCode::X),
        VirtualKeyCode::Y => Some(KeyCode::Y),
        VirtualKeyCode::Z => Some(KeyCode::Z),
        VirtualKeyCode::Escape => Some(KeyCode::Escape),
        VirtualKeyCode::F1 => Some(KeyCode::F1),
        VirtualKeyCode::F2 => Some(KeyCode::F2),
        VirtualKeyCode::F3 => Some(KeyCode::F3),
        VirtualKeyCode::F4 => Some(KeyCode::F4),
        VirtualKeyCode::F5 => Some(KeyCode::F5),
        VirtualKeyCode::F6 => Some(KeyCode::F6),
        VirtualKeyCode::F7 => Some(KeyCode::F7),
        VirtualKeyCode::F8 => Some(KeyCode::F8),
        VirtualKeyCode::F9 => Some(KeyCode::F9),
        VirtualKeyCode::F10 => Some(KeyCode::F10),
        VirtualKeyCode::F11 => Some(KeyCode::F11),
        VirtualKeyCode::F12 => Some(KeyCode::F12),
        VirtualKeyCode::Snapshot => Some(KeyCode::Snapshot),
        VirtualKeyCode::Insert => Some(KeyCode::Insert),
        VirtualKeyCode::Home => Some(KeyCode::Home),
        VirtualKeyCode::Delete => Some(KeyCode::Delete),
        VirtualKeyCode::End => Some(KeyCode::End),
        VirtualKeyCode::PageDown => Some(KeyCode::PageDown),
        VirtualKeyCode::PageUp => Some(KeyCode::PageUp),
        VirtualKeyCode::Left => Some(KeyCode::Left),
        VirtualKeyCode::Up => Some(KeyCode::Up),
        VirtualKeyCode::Right => Some(KeyCode::Right),
        VirtualKeyCode::Down => Some(KeyCode::Down),
        VirtualKeyCode::Back => Some(KeyCode::Backspace),
        VirtualKeyCode::Return => Some(KeyCode::Enter),
        VirtualKeyCode::Space => Some(KeyCode::Space),
        VirtualKeyCode::Comma => Some(KeyCode::Comma),
        VirtualKeyCode::Period => Some(KeyCode::Period),
        VirtualKeyCode::Plus => Some(KeyCode::Plus),
        VirtualKeyCode::Minus => Some(KeyCode::Minus),
        VirtualKeyCode::Numpad1 => Some(KeyCode::Key1),
        VirtualKeyCode::Numpad2 => Some(KeyCode::Key2),
        VirtualKeyCode::Numpad3 => Some(KeyCode::Key3),
        VirtualKeyCode::Numpad4 => Some(KeyCode::Key4),
        VirtualKeyCode::Numpad5 => Some(KeyCode::Key5),
        VirtualKeyCode::Numpad6 => Some(KeyCode::Key6),
        VirtualKeyCode::Numpad7 => Some(KeyCode::Key7),
        VirtualKeyCode::Numpad8 => Some(KeyCode::Key8),
        VirtualKeyCode::Numpad9 => Some(KeyCode::Key9),
        VirtualKeyCode::Numpad0 => Some(KeyCode::Key0),
        VirtualKeyCode::NumpadComma => Some(KeyCode::Comma),
        VirtualKeyCode::NumpadAdd => Some(KeyCode::Plus),
        VirtualKeyCode::NumpadSubtract => Some(KeyCode::Minus),
        VirtualKeyCode::NumpadMultiply => Some(KeyCode::Multiply),
        VirtualKeyCode::NumpadDivide => Some(KeyCode::Divide),
        _ => None,
    }
}

type GliumMouseButton = glium::glutin::event::MouseButton;

pub fn convert_mouse_button(value: GliumMouseButton) -> Option<MouseButton> {
    match value {
        GliumMouseButton::Left => Some(MouseButton::Left),
        GliumMouseButton::Right => Some(MouseButton::Right),
        GliumMouseButton::Middle => Some(MouseButton::Middle),
        _ => None,
    }
}
